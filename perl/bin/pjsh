#!/usr/bin/perl -w
use strict;
use Getopt::Long qw(:config gnu_getopt);
use Term::ReadLine;
use PHPJobs::ReadSecret;
use PHPJobs::System::Client;
use PHPJobs::Config;

# TODO pod documentation

# As for most Unix programs, the default, hardcoded behaviour gets overridden by
# environment, configuration file and command line options, in that order.

my $target;
my $secret;

# Default options
my $batch = 0;
my $debug = 0;

# Parse command-line options, taking --batch and --debug directly into account
my $cmdline_conf_file_path;
my %cmdline_extra_headers;
my $cmdline_secure;
my $cmdline_read_secret_from;
exit(1) unless GetOptions(
	'b|batch' => \$batch,
	'c|conf-file=s' => \$cmdline_conf_file_path,
	'd|debug!' => \$debug,
	'H|extra-header=s' => \%cmdline_extra_headers,
	'secure!' => \$cmdline_secure,
	'read-secret-from=s' => \$cmdline_read_secret_from,
);

# there must remain at least one argument: the target
&usage() unless (@ARGV);
$target = shift;

# other arguments are supposed to be a Unix command
my $cmdline_command = '';
$cmdline_command = join(' ', @ARGV) if (@ARGV);

# Get default configuration (hardcoded default options + configuration file)
my $system_config = PHPJobs::Config->new($cmdline_conf_file_path);
my $client_config = $system_config->getConfigurationForTarget($target);

# Override it by taking command-line options into account
map { $client_config->{'extra_headers'}->{$_} = $cmdline_extra_headers{$_}; } keys(%cmdline_extra_headers);
$client_config->{'secure'} = $cmdline_secure if (defined($cmdline_secure));
$client_config->{'read_secret_from'} = $cmdline_read_secret_from if (defined($cmdline_read_secret_from));

# Read secret if needed
if ($client_config->{'secure'}) {
	$secret = PHPJobs::ReadSecret::read_secret($target, $client_config->{'read_secret_from'}, $batch);
}

# Initialize our PHPJobs client object
my $my_client = new PHPJobs::System::Client(
	'jobs_remote_url' => $client_config->{'target_url'},
	'extra_headers' => $client_config->{'extra_headers'},
	'debug' => $debug,
	'secure' => $client_config->{'secure'},
	'secret' => $secret
);

# Handle non-interactive execution
my $rc = 0;
if (length($cmdline_command)) {
	$rc = $my_client->executeCommand($cmdline_command);
	exit($rc);
}

# Handle interactive execution
# Analyze the remote environment: username, hostname and current directory
my $username = '';
my $hostname = '';
my $old_cwd;
my $new_cwd;
my $cwd = '';

$rc = $my_client->executeCommand(
	q[echo $(whoami)@$(hostname):$(pwd)],
	$cwd,
	{'fetch_err' => 0, 'callback_out' => '::set_prompt'}
);

my $term = Term::ReadLine->new($username . '@' . $hostname);
$term->ornaments(0);
my $OUT = $term->OUT || \*STDOUT;
my $command_line;
my $command;
my $alias;
while (defined($command_line = $term->readline(prompt()))) {
	# ignore empty commands, get rid of leading and trailing spaces
	next if ($command_line !~ /\S/);
	$command_line =~ s/^\s+//;
	$command_line =~ s/\s+$//;
	
	$term->addhistory($command_line);
	
	# split read command for further analysis
	my @args = split(/\s+/, $command_line);
	$command = $args[0];
	
	# Handle "exit" commands
	if ($command eq 'exit') {
		last;
	}
	
	# Handle cd commands
	if ($command eq 'cd') {
		# Handle "-" special destination
		if (@args > 1 && $args[1] eq '-') {
			if (!defined($old_cwd)) {
				print STDERR "-pjsh: cd: old_cwd not set\n";
				next;
			}
			else {
				$command_line = sprintf('cd "%s"', $old_cwd);
			}
		}
		
		# add an echo statement to the command so we get notified of the new cwd
		$command_line .= '; echo pwd=$(pwd)';
		$new_cwd = '';
		$rc = $my_client->executeCommand(
			$command_line,
			$cwd,
			{
				'callback_out' => sub { $new_cwd .= $_[0]; }
			}
		);
		if ($rc == 0 && $new_cwd =~ m#^pwd=(.*)$# && ($1 ne $cwd)) {
			 ($old_cwd, $cwd) = ($cwd, $1);
		}
		next;
	}
	elsif ($command eq 'export' && @args > 1) {
		shift @args;
		foreach my $arg (@args) {
			if ($arg =~ m#^([A-Za-z_][A-Za-z_0-9]*)=(.*)$#) {
				$my_client->setEnvironmentVariable($1, $2);
			}
			elsif ($arg =~ m#^([A-Za-z_][A-Za-z_0-9]*)$#) {
				$my_client->setEnvironmentVariable($1, '');
			}
			else {
				printf(STDERR '-pjsh: export: `%s\': not a valid identifier', $arg);
			}
		}
		next;
	}
	elsif ($command eq 'unset' && @args > 1) {
		shift @args;
		foreach my $arg (@args) {
			if ($arg =~ m#^([A-Za-z_][A-Za-z_0-9]*)$#) {
				$my_client->unsetEnvironmentVariable($1);
			}
			else {
				printf(STDERR '-pjsh:unset: `%s\': not a valid identifier', $arg);
			}
		}
		next;
	}
	elsif (grep(m/\Q$command\E/, keys(%{ $client_config->{'aliases'} })) ) {
		$alias = $client_config->{'aliases'}->{$command};
		$command_line =~ s{^\Q$command\E}{$alias};
	}
	
	# Handle regular commands
	$rc = $my_client->executeCommand($command_line, $cwd);
}
print "\n";

# callback sub for this specific purpose
sub set_prompt {
	my $prompt = $_[0];
	chomp $prompt;
	($username, $hostname, $cwd) = ($prompt =~ m#([^@]*)@([^:]*):(.*)$#);
}

sub prompt {
	my $prompt = '[%d][%02d:%02d:%02d][%s]{%s}%s %s ';
	my $user_sign = $username eq 'root' ? '#' : '$';
	my @time = localtime(time());
	return sprintf(
		$prompt,
		$rc,
		$time[2], $time[1], $time[0],
		$username,
		$hostname,
		$cwd,
		$user_sign
	);
}

sub usage {
	printf('Usage: %s [OPTION]... URL|host' . "\n", $0);
	exit(shift || 0);
}
